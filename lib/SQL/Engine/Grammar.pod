
=encoding utf8

=head1 NAME

SQL::Engine::Grammar - Standard Grammar

=cut

=head1 ABSTRACT

SQL::Engine Standard Grammar

=cut

=head1 SYNOPSIS

  use SQL::Engine::Grammar;

  my $grammar = SQL::Engine::Grammar->new(
    schema => {
      select => {
        from => {
          table => 'users'
        },
        columns => [
          {
            column => '*'
          }
        ]
      }
    }
  );

  # $grammar->execute;

=cut

=head1 DESCRIPTION

This package provides methods for converting
L<json-sql|https://github.com/iamalnewkirk/json-sql> data structures into
SQL statements.

=cut

=head1 LIBRARIES

This package uses type constraints from:

L<Types::Standard>

=cut

=head1 ATTRIBUTES

This package has the following attributes:

=cut

=head2 operations

  operations(InstanceOf["SQL::Engine::Collection"])

This attribute is read-only, accepts C<(InstanceOf["SQL::Engine::Collection"])> values, and is optional.

=cut

=head2 schema

  schema(HashRef)

This attribute is read-only, accepts C<(HashRef)> values, and is required.

=cut

=head2 validator

  validator(Maybe[InstanceOf["SQL::Validator"]])

This attribute is read-only, accepts C<(Maybe[InstanceOf["SQL::Validator"]])> values, and is optional.

=cut

=head1 METHODS

This package implements the following methods:

=cut

=head2 binding

  binding(Str $name) : Str

The binding method registers a SQL statement binding (or placeholder).

=over 4

=item binding example #1

  # given: synopsis

  $grammar->binding('user_id');
  $grammar->binding('user_id');
  $grammar->binding('user_id');
  $grammar->binding('user_id');
  $grammar->binding('user_id');

=back

=cut

=head2 column_change

  column_change(HashRef $data) : Object

The column_change method generates SQL statements to change a column
definition.

=over 4

=item column_change example #1

  my $grammar = SQL::Engine::Grammar->new({
    schema => {
      'column-change' => {
        for => {
          table => 'users'
        },
        column => {
          name => 'accessed',
          type => 'datetime',
          nullable => 1
        }
      }
    }
  });

  $grammar->column_change($grammar->schema->{'column-change'});

=back

=cut

=head2 column_create

  column_create(HashRef $data) : Object

The column_create method generates SQL statements to add a new table column.

=over 4

=item column_create example #1

  # given: synopsis

  $grammar->column_create({
    for => {
      table => 'users'
    },
    column => {
      name => 'accessed',
      type => 'datetime'
    }
  });

=back

=cut

=head2 column_definition

  column_definition(HashRef $data) : HashRef

The column_definition method column definition SQL statement fragments.

=over 4

=item column_definition example #1

  # given: synopsis

  my $column_definition = $grammar->column_definition({
    name => 'id',
    type => 'number',
    primary => 1
  });

=back

=cut

=head2 column_drop

  column_drop(HashRef $data) : Object

The column_drop method generates SQL statements to remove a table column.

=over 4

=item column_drop example #1

  # given: synopsis

  $grammar->column_drop({
    table => 'users',
    column => 'accessed'
  });

=back

=cut

=head2 column_rename

  column_rename(HashRef $data) : Object

The column_rename method generates SQL statements to rename a table column.

=over 4

=item column_rename example #1

  # given: synopsis

  $grammar->column_rename({
    for => {
      table => 'users'
    },
    name => {
      old => 'accessed',
      new => 'accessed_at'
    }
  });

=back

=cut

=head2 column_specification

  column_specification(HashRef $data) : Str

The column_specification method a column definition SQL statment partial.

=over 4

=item column_specification example #1

  # given: synopsis

  my $column_specification = $grammar->column_specification({
    name => 'id',
    type => 'number',
    primary => 1
  });

=back

=cut

=head2 constraint_create

  constraint_create(HashRef $data) : Object

The constraint_create method generates SQL statements to create a table
constraint.

=over 4

=item constraint_create example #1

  # given: synopsis

  $grammar->constraint_create({
    source => {
      table => 'users',
      column => 'profile_id'
    },
    target => {
      table => 'profiles',
      column => 'id'
    }
  });

=back

=cut

=head2 constraint_drop

  constraint_drop(HashRef $data) : Object

The constraint_drop method generates SQL statements to remove a table
constraint.

=over 4

=item constraint_drop example #1

  # given: synopsis

  $grammar->constraint_drop({
    source => {
      table => 'users',
      column => 'profile_id'
    },
    target => {
      table => 'profiles',
      column => 'id'
    }
  });

=back

=cut

=head2 constraint_name

  constraint_name(HashRef $data) : Str

The constraint_name method returns the generated constraint name.

=over 4

=item constraint_name example #1

  # given: synopsis

  my $constraint_name = $grammar->constraint_name({
    source => {
      table => 'users',
      column => 'profile_id'
    },
    target => {
      table => 'profiles',
      column => 'id'
    }
  });

=back

=cut

=head2 constraint_option

  constraint_option(Str $name) : Str

The constraint_option method returns a SQL expression for the constraint option
provided.

=over 4

=item constraint_option example #1

  # given: synopsis

  $grammar->constraint_option('no-action');

=back

=cut

=head2 criteria

  criteria(ArrayRef $data) : ArrayRef[Str]

The criteria method returns a list of SQL expressions.

=over 4

=item criteria example #1

  # given: synopsis

  my $criteria = $grammar->criteria([
    {
      eq => [{ column => 'id' }, 123]
    },
    {
      'not-null' => { column => 'deleted' }
    }
  ]);

=back

=cut

=head2 criterion

  criterion(HashRef $data) : Str

The criterion method returns a SQL expression.

=over 4

=item criterion example #1

  # given: synopsis

  my $criterion = $grammar->criterion({
    in => [{ column => 'theme' }, 'light', 'dark']
  });

=back

=cut

=head2 database_create

  database_create(HashRef $data) : Object

The database_create method generates SQL statements to create a database.

=over 4

=item database_create example #1

  # given: synopsis

  $grammar->database_create({
    name => 'todoapp'
  });

=back

=cut

=head2 database_drop

  database_drop(HashRef $data) : Object

The database_drop method generates SQL statements to remove a database.

=over 4

=item database_drop example #1

  # given: synopsis

  $grammar->database_drop({
    name => 'todoapp'
  });

=back

=cut

=head2 delete

  delete(HashRef $data) : Object

The delete method generates SQL statements to delete table rows.

=over 4

=item delete example #1

  # given: synopsis

  $grammar->delete({
    from => {
      table => 'tasklists'
    }
  });

=back

=cut

=head2 execute

  execute() : Object

The execute method validates and processes the object instruction.

=over 4

=item execute example #1

  # given: synopsis

  $grammar->operations->clear;

  $grammar->execute;

=back

=cut

=head2 expression

  expression(Any $data) : Any

The expression method returns a SQL expression representing the data provided.

=over 4

=item expression example #1

  # given: synopsis

  $grammar->expression(undef);

  # NULL

=back

=cut

=head2 index_create

  index_create(HashRef $data) : Object

The index_create method generates SQL statements to create a table index.

=over 4

=item index_create example #1

  # given: synopsis

  $grammar->index_create({
    for => {
      table => 'users'
    },
    columns => [
      {
        column => 'name'
      }
    ]
  });

=back

=cut

=head2 index_drop

  index_drop(HashRef $data) : Object

The index_drop method generates SQL statements to remove a table index.

=over 4

=item index_drop example #1

  # given: synopsis

  $grammar->index_drop({
    for => {
      table => 'users'
    },
    columns => [
      {
        column => 'name'
      }
    ]
  });

=back

=cut

=head2 index_name

  index_name(HashRef $data) : Str

The index_name method returns the generated index name.

=over 4

=item index_name example #1

  # given: synopsis

  my $index_name = $grammar->index_name({
    for => {
      table => 'users'
    },
    columns => [
      {
        column => 'email'
      }
    ],
    unique => 1
  });

=back

=cut

=head2 insert

  insert(HashRef $data) : Object

The insert method generates SQL statements to insert table rows.

=over 4

=item insert example #1

  # given: synopsis

  $grammar->insert({
    into => {
      table => 'users'
    },
    values => [
      {
        value => undef
      },
      {
        value => 'Rob Zombie'
      },
      {
        value => {
          function => ['now']
        }
      },
      {
        value => {
          function => ['now']
        }
      },
      {
        value => {
          function => ['now']
        }
      }
    ]
  });

=back

=cut

=head2 name

  name(Any @args) : Str

The name method returns a qualified quoted object name.

=over 4

=item name example #1

  # given: synopsis

  my $name = $grammar->name(undef, 'public', 'users');

  # "public"."users"

=back

=cut

=head2 operation

  operation(Str $statement) : InstanceOf["SQL::Engine::Operation"]

The operation method creates and appends an operation to the I<"operations">
collection.

=over 4

=item operation example #1

  # given: synopsis

  $grammar->operation('SELECT TRUE');

=back

=cut

=head2 process

  process(Mayb[HashRef] $schema) : Object

The process method processes the object instructions.

=over 4

=item process example #1

  # given: synopsis

  $grammar->process;

=back

=cut

=head2 schema_create

  schema_create(HashRef $data) : Object

The schema_create method generates SQL statements to create a schema.

=over 4

=item schema_create example #1

  # given: synopsis

  $grammar->schema_create({
    name => 'private',
  });

=back

=cut

=head2 schema_drop

  schema_drop(HashRef $data) : Object

The schema_drop method generates SQL statements to remove a schema.

=over 4

=item schema_drop example #1

  # given: synopsis

  $grammar->schema_drop({
    name => 'private',
  });

=back

=cut

=head2 schema_rename

  schema_rename(HashRef $data) : Object

The schema_rename method generates SQL statements to rename a schema.

=over 4

=item schema_rename example #1

  # given: synopsis

  $grammar->schema_rename({
    name => {
      old => 'private',
      new => 'restricted'
    }
  });

=back

=cut

=head2 select

  select(HashRef $data) : Object

The select method generates SQL statements to select table rows.

=over 4

=item select example #1

  # given: synopsis

  $grammar->select({
    from => {
      table => 'people'
    },
    columns => [
      { column => 'name' }
    ]
  });

=back

=cut

=head2 table

  table(HashRef $data) : Str

The table method returns a qualified quoted table name.

=over 4

=item table example #1

  # given: synopsis

  my $table = $grammar->table({
    schema => 'public',
    table => 'users',
    alias => 'u'
  });

=back

=cut

=head2 table_create

  table_create(HashRef $data) : Object

The table_create method generates SQL statements to create a table.

=over 4

=item table_create example #1

  # given: synopsis

  $grammar->table_create({
    name => 'users',
    columns => [
      {
        name => 'id',
        type => 'integer',
        primary => 1
      }
    ]
  });

=back

=cut

=head2 table_drop

  table_drop(HashRef $data) : Object

The table_drop method generates SQL statements to remove a table.

=over 4

=item table_drop example #1

  # given: synopsis

  $grammar->table_drop({
    name => 'people'
  });

=back

=cut

=head2 table_rename

  table_rename(HashRef $data) : Object

The table_rename method generates SQL statements to rename a table.

=over 4

=item table_rename example #1

  # given: synopsis

  $grammar->table_rename({
    name => {
      old => 'peoples',
      new => 'people'
    }
  });

=back

=cut

=head2 term

  term(Str @args) : Str

The term method returns a SQL keyword.

=over 4

=item term example #1

  # given: synopsis

  $grammar->term('end');

=back

=cut

=head2 transaction

  transaction(HashRef $data) : Object

The transaction method generates SQL statements to commit an atomic database
transaction.

=over 4

=item transaction example #1

  my $grammar = SQL::Engine::Grammar->new({
    schema => {
      'transaction' => {
        queries => [
          {
            'table-create' => {
              name => 'users',
              columns => [
                {
                  name => 'id',
                  type => 'integer',
                  primary => 1
                }
              ]
            }
          }
        ]
      }
    }
  });

  $grammar->column_change($grammar->schema->{'transaction'});

=back

=cut

=head2 type

  type(HashRef $data) : Str

The type method return the SQL representation for a data type.

=over 4

=item type example #1

  # given: synopsis

  $grammar->type({
    type => 'datetime-wtz'
  });

  # datetime

=back

=cut

=head2 type_binary

  type_binary(HashRef $data) : Str

The type_binary method returns the SQL expression representing a binary data
type.

=over 4

=item type_binary example #1

  # given: synopsis

  $grammar->type_binary({});

  # blob

=back

=cut

=head2 type_boolean

  type_boolean(HashRef $data) : Str

The type_boolean method returns the SQL expression representing a boolean data
type.

=over 4

=item type_boolean example #1

  # given: synopsis

  $grammar->type_boolean({});

  # tinyint(1)

=back

=cut

=head2 type_char

  type_char(HashRef $data) : Str

The type_char method returns the SQL expression representing a char data type.

=over 4

=item type_char example #1

  # given: synopsis

  $grammar->type_char({});

  # varchar

=back

=cut

=head2 type_date

  type_date(HashRef $data) : Str

The type_date method returns the SQL expression representing a date data type.

=over 4

=item type_date example #1

  # given: synopsis

  $grammar->type_date({});

  # date

=back

=cut

=head2 type_datetime

  type_datetime(HashRef $data) : Str

The type_datetime method returns the SQL expression representing a datetime
data type.

=over 4

=item type_datetime example #1

  # given: synopsis

  $grammar->type_datetime({});

  # datetime

=back

=cut

=head2 type_datetime_wtz

  type_datetime_wtz(HashRef $data) : Str

The type_datetime_wtz method returns the SQL expression representing a datetime
(and timezone) data type.

=over 4

=item type_datetime_wtz example #1

  # given: synopsis

  $grammar->type_datetime_wtz({});

  # datetime

=back

=cut

=head2 type_decimal

  type_decimal(HashRef $data) : Str

The type_decimal method returns the SQL expression representing a decimal data
type.

=over 4

=item type_decimal example #1

  # given: synopsis

  $grammar->type_decimal({});

  # numeric

=back

=cut

=head2 type_double

  type_double(HashRef $data) : Str

The type_double method returns the SQL expression representing a double data
type.

=over 4

=item type_double example #1

  # given: synopsis

  $grammar->type_double({});

  # float

=back

=cut

=head2 type_enum

  type_enum(HashRef $data) : Str

The type_enum method returns the SQL expression representing a enum data type.

=over 4

=item type_enum example #1

  # given: synopsis

  $grammar->type_enum({});

  # varchar

=back

=cut

=head2 type_float

  type_float(HashRef $data) : Str

The type_float method returns the SQL expression representing a float data
type.

=over 4

=item type_float example #1

  # given: synopsis

  $grammar->type_float({});

  # float

=back

=cut

=head2 type_integer

  type_integer(HashRef $data) : Str

The type_integer method returns the SQL expression representing a integer data
type.

=over 4

=item type_integer example #1

  # given: synopsis

  $grammar->type_integer({});

  # integer

=back

=cut

=head2 type_integer_big

  type_integer_big(HashRef $data) : Str

The type_integer_big method returns the SQL expression representing a
big-integer data type.

=over 4

=item type_integer_big example #1

  # given: synopsis

  $grammar->type_integer_big({});

  # integer

=back

=cut

=head2 type_integer_big_unsigned

  type_integer_big_unsigned(HashRef $data) : Str

The type_integer_big_unsigned method returns the SQL expression representing a
big unsigned integer data type.

=over 4

=item type_integer_big_unsigned example #1

  # given: synopsis

  $grammar->type_integer_big_unsigned({});

  # integer

=back

=cut

=head2 type_integer_medium

  type_integer_medium(HashRef $data) : Str

The type_integer_medium method returns the SQL expression representing a medium
integer data type.

=over 4

=item type_integer_medium example #1

  # given: synopsis

  $grammar->type_integer_medium({});

  # integer

=back

=cut

=head2 type_integer_medium_unsigned

  type_integer_medium_unsigned(HashRef $data) : Str

The type_integer_medium_unsigned method returns the SQL expression representing
a unsigned medium integer data type.

=over 4

=item type_integer_medium_unsigned example #1

  # given: synopsis

  $grammar->type_integer_medium_unsigned({});

  # integer

=back

=cut

=head2 type_integer_small

  type_integer_small(HashRef $data) : Str

The type_integer_small method returns the SQL expression representing a small
integer data type.

=over 4

=item type_integer_small example #1

  # given: synopsis

  $grammar->type_integer_small({});

  # integer

=back

=cut

=head2 type_integer_small_unsigned

  type_integer_small_unsigned(HashRef $data) : Str

The type_integer_small_unsigned method returns the SQL expression representing
a unsigned small integer data type.

=over 4

=item type_integer_small_unsigned example #1

  # given: synopsis

  $grammar->type_integer_small_unsigned({});

  # integer

=back

=cut

=head2 type_integer_tiny

  type_integer_tiny(HashRef $data) : Str

The type_integer_tiny method returns the SQL expression representing a tiny
integer data type.

=over 4

=item type_integer_tiny example #1

  # given: synopsis

  $grammar->type_integer_tiny({});

  # integer

=back

=cut

=head2 type_integer_tiny_unsigned

  type_integer_tiny_unsigned(HashRef $data) : Str

The type_integer_tiny_unsigned method returns the SQL expression representing a
unsigned tiny integer data type.

=over 4

=item type_integer_tiny_unsigned example #1

  # given: synopsis

  $grammar->type_integer_tiny_unsigned({});

  # integer

=back

=cut

=head2 type_integer_unsigned

  type_integer_unsigned(HashRef $data) : Str

The type_integer_unsigned method returns the SQL expression representing a
unsigned integer data type.

=over 4

=item type_integer_unsigned example #1

  # given: synopsis

  $grammar->type_integer_unsigned({});

  # integer

=back

=cut

=head2 type_json

  type_json(HashRef $data) : Str

The type_json method returns the SQL expression representing a json data type.

=over 4

=item type_json example #1

  # given: synopsis

  $grammar->type_json({});

  # text

=back

=cut

=head2 type_number

  type_number(HashRef $data) : Str

The type_number method returns the SQL expression representing a number data
type.

=over 4

=item type_number example #1

  # given: synopsis

  $grammar->type_number({});

  # integer

=back

=cut

=head2 type_string

  type_string(HashRef $data) : Str

The type_string method returns the SQL expression representing a string data
type.

=over 4

=item type_string example #1

  # given: synopsis

  $grammar->type_string({});

  # varchar

=back

=cut

=head2 type_text

  type_text(HashRef $data) : Str

The type_text method returns the SQL expression representing a text data type.

=over 4

=item type_text example #1

  # given: synopsis

  $grammar->type_text({});

  # text

=back

=cut

=head2 type_text_long

  type_text_long(HashRef $data) : Str

The type_text_long method returns the SQL expression representing a long text
data type.

=over 4

=item type_text_long example #1

  # given: synopsis

  $grammar->type_text_long({});

  # text

=back

=cut

=head2 type_text_medium

  type_text_medium(HashRef $data) : Str

The type_text_medium method returns the SQL expression representing a medium
text data type.

=over 4

=item type_text_medium example #1

  # given: synopsis

  $grammar->type_text_medium({});

  # text

=back

=cut

=head2 type_time

  type_time(HashRef $data) : Str

The type_time method returns the SQL expression representing a time data type.

=over 4

=item type_time example #1

  # given: synopsis

  $grammar->type_time({});

  # time

=back

=cut

=head2 type_time_wtz

  type_time_wtz(HashRef $data) : Str

The type_time_wtz method returns the SQL expression representing a time (and
timezone) data type.

=over 4

=item type_time_wtz example #1

  # given: synopsis

  $grammar->type_time_wtz({});

  # time

=back

=cut

=head2 type_timestamp

  type_timestamp(HashRef $data) : Str

The type_timestamp method returns the SQL expression representing a timestamp
data type.

=over 4

=item type_timestamp example #1

  # given: synopsis

  $grammar->type_timestamp({});

  # datetime

=back

=cut

=head2 type_timestamp_wtz

  type_timestamp_wtz(HashRef $data) : Str

The type_timestamp_wtz method returns the SQL expression representing a
timestamp (and timezone) data type.

=over 4

=item type_timestamp_wtz example #1

  # given: synopsis

  $grammar->type_timestamp_wtz({});

  # datetime

=back

=cut

=head2 type_uuid

  type_uuid(HashRef $data) : Str

The type_uuid method returns the SQL expression representing a uuid data type.

=over 4

=item type_uuid example #1

  # given: synopsis

  $grammar->type_uuid({});

  # varchar

=back

=cut

=head2 update

  update(HashRef $data) : Object

The update method generates SQL statements to update table rows.

=over 4

=item update example #1

  # given: synopsis

  $grammar->update({
    for => {
      table => 'users'
    },
    columns => [
      {
        column => 'updated',
        value => { function => ['now'] }
      }
    ]
  });

=back

=cut

=head2 validate

  validate() : Bool

The validate method validates the data structure defined in the I<"schema">
property.

=over 4

=item validate example #1

  # given: synopsis

  my $valid = $grammar->validate;

=back

=cut

=head2 value

  value(Any $value) : Str

The value method returns the SQL representation of a value.

=over 4

=item value example #1

  # given: synopsis

  $grammar->value(undef);

  # NULL

=back

=cut

=head2 view_create

  view_create(HashRef $data) : Object

The view_create method generates SQL statements to create a table view.

=over 4

=item view_create example #1

  # given: synopsis

  $grammar->view_create({
    name => 'active_users',
    query => {
      select => {
        from => {
          table => 'users'
        },
        columns => [
          {
            column => '*'
          }
        ],
        where => [
          {
            'not-null' => {
              column => 'deleted'
            }
          }
        ]
      }
    }
  });

=back

=cut

=head2 view_drop

  view_drop(HashRef $data) : Object

The view_drop method generates SQL statements to remove a table view.

=over 4

=item view_drop example #1

  # given: synopsis

  $grammar->view_drop({
    name => 'active_users'
  });

=back

=cut

=head2 wrap

  wrap(Str $name) : Str

The wrap method returns a SQL-escaped string.

=over 4

=item wrap example #1

  # given: synopsis

  $grammar->wrap('field');

  # "field"

=back

=cut

=head1 AUTHOR

Al Newkirk, C<awncorp@cpan.org>

=head1 LICENSE

Copyright (C) 2011-2019, Al Newkirk, et al.

This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the L<"license
file"|https://github.com/iamalnewkirk/sql-engine/blob/master/LICENSE>.

=head1 PROJECT

L<Wiki|https://github.com/iamalnewkirk/sql-engine/wiki>

L<Project|https://github.com/iamalnewkirk/sql-engine>

L<Initiatives|https://github.com/iamalnewkirk/sql-engine/projects>

L<Milestones|https://github.com/iamalnewkirk/sql-engine/milestones>

L<Contributing|https://github.com/iamalnewkirk/sql-engine/blob/master/CONTRIBUTE.md>

L<Issues|https://github.com/iamalnewkirk/sql-engine/issues>

=cut